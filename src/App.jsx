import { useEffect, useState } from "react";
import { ethers } from "ethers";
import abi from "./abi/Investment.json";
import { CONTRACT_ADDRESS } from "./utils/config";
import LoginRegister from "./LoginRegister";
import { getProfile, logout } from "./services/auth";
import { useNavigate } from "react-router-dom";
import { createProject, getProjects } from "./services/project";
import Header from "./components/Header";


function App() {
  const [account, setAccount] = useState(null);
  const [contract, setContract] = useState(null);
  const [provider, setProvider] = useState(null);
  const [startups, setStartups] = useState([]);
  const [goal, setGoal] = useState("");
  const [sname, setTitle] = useState("");
  const [desc, setDescription] = useState("");
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isFounder, setIsFounder] = useState(false);
  const [userEmail, setUserEmail] = useState("");
  const [myStartups, setMyStartups] = useState([]);
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    setIsAuthenticated(false);
    setIsFounder(false);
    setUserEmail("");
    setAccount(null);
    navigate("/login");
  };

  const connectWallet = async () => {
    if (!window.ethereum) {
      alert("–£—Å—Ç–∞–Ω–æ–≤–∏ MetaMask");
      return;
    }

    const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
    const _provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await _provider.getSigner();
    const address = accounts[0];

    setAccount(address);
    setProvider(_provider);

    const _contract = new ethers.Contract(CONTRACT_ADDRESS, abi, signer);
    setContract(_contract);
  };

  const loadStartups = async () => {
    try {
      const loaded = await getProjects(); // —Å project-service
      const enriched = await Promise.all(
        loaded.map(async (p) => {
          try {
            const s = await contract.startups(p.id); // –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            return {
              ...p,
              goal: ethers.formatEther(s.goal),
              raised: ethers.formatEther(s.raised),
              funded: s.funded,
              founder: s.founder,
            };
          } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", err.message);
            return p;
          }
        })
      );
  
      setStartups(enriched);
  
      if (account) {
        const mine = enriched.filter(
          (s) => s.ownerAddress?.toLowerCase() === account?.toLowerCase()
        );
        setMyStartups(mine);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤:", err.message);
    }
  };
  
  
  
  

  const handleCreateStartup = async () => {
    if (!goal || !isAuthenticated || !isFounder) return;

    try {
      const data = {
        title: sname,
        description: desc,
        fundingGoal: goal,
        ownerAddress: account,
      };

      await createProject(data);
      alert("‚úÖ –°—Ç–∞—Ä—Ç–∞–ø —Å–æ–∑–¥–∞–Ω");
      setGoal("");
      setTitle("");
      setDescription("");
      loadStartups();
    } catch (err) {
      alert("‚ùå –û—à–∏–±–∫–∞: " + err.message);
    }
  };

  const handleInvest = async (id) => {
    const amount = prompt("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É tBNB:");
    if (!amount || !provider) return;

    const signer = await provider.getSigner();
    const tx = await contract.connect(signer).invest(id, {
      value: ethers.parseEther(amount),
    });
    await tx.wait();

    alert("‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞");
    loadStartups();
  };

  const handleFinalize = async (id) => {
    try {
      const tx = await contract.finalize(id);
      await tx.wait();
      alert("‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é");
      loadStartups();
    } catch (err) {
      alert("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: " + err.message);
    }
  };

  const handleRefund = async (id) => {
    try {
      const tx = await contract.refund(id);
      await tx.wait();
      alert("üîÅ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∏–Ω–≤–µ—Å—Ç–æ—Ä—É");
      loadStartups();
    } catch (err) {
      alert("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + err.message);
    }
  };

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const res = await getProfile();
        if (res.user) {
          setIsAuthenticated(true);
          setUserEmail(res.user.email);
          setIsFounder(res.user.role === "founder");
        }
      } catch {
        setIsAuthenticated(false);
        setIsFounder(false);
      }
    };
    checkAuth();
  }, []);

  useEffect(() => {
    if (contract && account) loadStartups();
  }, [contract, account]);

  return (
    <div style={{ padding: "2rem", fontFamily: "sans-serif" }}>
      <h1>üöÄ BNB Crowdfunding</h1>

      {!isAuthenticated && <LoginRegister />}

      {userEmail && (
        <div style={{ marginBottom: "1rem" }}>
          <p>
            üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: <strong>{userEmail}</strong><br />
            üß© –†–æ–ª—å: <strong>{isFounder ? "founder" : "investor"}</strong>
          </p>
          <button onClick={handleLogout}>üö™ –í—ã–π—Ç–∏</button>
        </div>
      )}

      {account && <p>üíº –ö–æ—à–µ–ª—ë–∫: {account}</p>}

      {!account ? (
        <button onClick={connectWallet}>üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å MetaMask</button>
      ) : (
        <>
          {/* ‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–∞–ø */}
          {isAuthenticated && isFounder && (
            <>
              <h2>‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–∞–ø</h2>
              <input
                type="text"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                value={sname}
                onChange={(e) => setTitle(e.target.value)}
              />
              <input
                type="text"
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
                value={desc}
                onChange={(e) => setDescription(e.target.value)}
              />
              <input
                type="text"
                placeholder="–¶–µ–ª—å –≤ BNB"
                value={goal}
                onChange={(e) => setGoal(e.target.value)}
              />
              <button onClick={handleCreateStartup}>–°–æ–∑–¥–∞—Ç—å</button>
            </>
          )}

          {/* üìÅ –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã */}
          {isFounder && myStartups.length > 0 && (
            <>
              <h2>üìÅ –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã</h2>
              {myStartups.map((s) => (
                <div key={s.id} style={{ border: "1px dashed #aaa", margin: "1rem 0", padding: "1rem" }}>
                  <p><strong>ID:</strong> {s.id}</p>
                  <p><strong>–¶–µ–ª—å:</strong> {s.goal} BNB</p>
                  <p><strong>–°–æ–±—Ä–∞–Ω–æ:</strong> {s.raised} BNB</p>
                  <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {s.funded ? "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ" : "‚è≥ –û–∂–∏–¥–∞–µ—Ç"}</p>
                </div>
              ))}
            </>
          )}

          {/* üì¶ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ */}
          <h2>üì¶ –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤</h2>
          {startups.map((s) => (
            <div key={s.id} style={{ border: "1px solid #ccc", margin: "1rem 0", padding: "1rem" }}>
              <p><strong>ID:</strong> {s.id}</p>
              <p><strong>–í–ª–∞–¥–µ–ª–µ—Ü:</strong> {s.founder}</p>
              <p><strong>–¶–µ–ª—å:</strong> {s.goal} BNB</p>
              <p><strong>–°–æ–±—Ä–∞–Ω–æ:</strong> {s.raised} BNB</p>
              <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {s.funded ? "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ" : "‚è≥ –û–∂–∏–¥–∞–µ—Ç"}</p>

              {!s.funded && (
                <>
                  <button onClick={() => handleInvest(s.id)}>üí∏ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å</button>

                  {isFounder && account?.toLowerCase() === s.founder?.toLowerCase() && (
                    <button onClick={() => handleFinalize(s.id)}>‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å</button>
                  )}

                  <button onClick={() => handleRefund(s.id)}>üîÅ –í–µ—Ä–Ω—É—Ç—å</button>
                </>
              )}
            </div>
          ))}
        </>
      )}
    </div>
  );
}


export default App;
